#include<iostream>
#include<algorithm>
#include<math.h>
#include<vector>
#include<string>
#include<queue>
#include<map>
using namespace std;
int T[5][8];
bool isRotate[5];
int K;

void Rotate(int Num, int how_rotate)
{
	/*for (int i = 0; i < 8; i++)
	cout << T[Num][i] << " ";
	cout << endl;
	*/
	bool check_ok[5];
	for (int i = 1; i < 5; i++)
		check_ok[i] = false;

	if (Num == 1)
	{
		if (T[1][2] != T[2][6])
			check_ok[2] = true;

	}
	else if (Num == 2)
	{
		if (T[1][2] != T[2][6])
			check_ok[1] = true;
		if (T[2][2] != T[3][6])
			check_ok[3] = true;
	}
	else if (Num == 3)
	{
		if (T[2][2] != T[3][6])
			check_ok[2] = true;
		if (T[3][2] != T[4][6])
			check_ok[4] = true;
	}
	else
	{
		if (T[3][2] != T[4][6])
			check_ok[3] = true;
	}



	if (how_rotate == 1)
	{
		int temp = T[Num][7];
		for (int i = 6; i >= 0; i--)
		{
			T[Num][i + 1] = T[Num][i];
		}
		T[Num][0] = temp;

	}
	else
	{
		int temp = T[Num][0];
		for (int i = 0; i < 7; i++)
		{
			T[Num][i] = T[Num][i+1];
		}
		T[Num][7] = temp;
		
	}
	
	if (Num == 1)
	{
		if (!isRotate[2] && check_ok[2])
		{
			isRotate[2] = true;
			Rotate(2, (how_rotate == 1 ? -1 : 1));
		}
	}
	else if (Num == 2)
	{
			if (!isRotate[1] && check_ok[1])
			{
				isRotate[1] = true;
				Rotate(1, (how_rotate == 1 ? -1 : 1));
			}
			if (!isRotate[3] && check_ok[3])
			{
				isRotate[3] = true;
				Rotate(3, (how_rotate == 1 ? -1 : 1));
			}
		
	}
	else if (Num == 3)
	{
		if (!isRotate[2] && check_ok[2])
		{
			isRotate[2] = true;
			Rotate(2, (how_rotate == 1 ? -1 : 1));
		}
		if (!isRotate[4] && check_ok[4])
		{
			isRotate[4] = true;
			Rotate(4, (how_rotate == 1 ? -1 : 1));
		}

	}
	else
	{
		if (!isRotate[3] && check_ok[3])
		{
			isRotate[3] = true;
			Rotate(3, (how_rotate == 1 ? -1 : 1));
		}
	}
}

int main()
{
	int testcase,countT;
	cin >> testcase;
	countT = 1;
	while (testcase != 0)
	{
		cin >> K;
		for (int i = 1; i <= 4; i++)
		{
			for (int j = 0; j < 8; j++)
			{
				cin >> T[i][j];
			}
		}

		for (int i = 1; i < 5; i++)
		{
			isRotate[i] = false;
		}

		for (int i = 0; i < K; i++)
		{
			int Num, how_rotate;
			cin >> Num >> how_rotate;
			isRotate[Num] = true;
			Rotate(Num, how_rotate);

			for (int s = 1; s < 5; s++)
				isRotate[s] = false;
		}

		int ret = T[1][0] * 1 + T[2][0] * 2 + T[3][0] * 4 + T[4][0] * 8;

		cout << "#"<<countT++<<" "<<ret << endl;
		testcase--;
	}

	return 0;
}

