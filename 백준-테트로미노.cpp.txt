// ConsoleApplication3.cpp: 콘솔 응용 프로그램의 진입점을 정의합니다.
//
#include<iostream>
#include<string.h>
#include<queue>
#include<cstdio>

using namespace std;
int arr[501][501];
int result = 0;
bool visit_dfs[501][501];
bool visit_bfs[501][501];
int N, M;

void dfs(int x,int y,int score, int depth)
{
	
	visit_dfs[x][y] = true;
	if (depth == 3)
	{
		if (score > result)
		{
			result = score;
		}
		visit_dfs[x][y] = false;
		return;
	}

	if (x + 1 < N&& visit_dfs[x + 1][y] == false)
	{
		dfs(x + 1, y, score+arr[x + 1][y], depth + 1);
	}

	if (y + 1 < M&& visit_dfs[x][y+1] == false)
	{
		dfs(x, y+1, score+ arr[x][y + 1], depth + 1);
	}

	if (x - 1 >= 0&& visit_dfs[x - 1][y] == false)
	{
		dfs(x - 1, y, score+arr[x-1][y], depth + 1);
	}

	if (y - 1 >= 0&& visit_dfs[x][y-1] == false)
	{
		dfs(x, y-1, score+arr[x][y-1], depth + 1);
	}

	visit_dfs[x][y] = false;
}

void crazy(int x, int y)
{
	if (x + 1 < N&&x - 1 >= 0 && y + 1 < M)
	{
		if(result<arr[x][y] + arr[x + 1][y] + arr[x - 1][y] + arr[x][y + 1])
			result = arr[x][y] + arr[x + 1][y] + arr[x - 1][y] + arr[x][y + 1];
	}
	if (x + 1 < N&&x - 1 >= 0 && y - 1 >= 0)
	{
		if(result<arr[x][y] + arr[x + 1][y] + arr[x - 1][y] + arr[x][y - 1])
			result = arr[x][y] + arr[x + 1][y] + arr[x - 1][y] + arr[x][y - 1];
	}
	if (x + 1 < N&&y - 1 >= 0 && y + 1 < M)
	{
		if(result<arr[x][y] + arr[x + 1][y] + arr[x][y - 1] + arr[x][y + 1])
		result = arr[x][y] + arr[x + 1][y] + arr[x][y-1] + arr[x][y + 1];
	}
	if (x - 1 >= 0&&y - 1 >= 0 && y + 1 < M)
	{
		if(result<arr[x][y] + arr[x - 1][y] + arr[x][y - 1] + arr[x][y + 1])
		result = arr[x][y] + arr[x- 1][y] + arr[x][y-1] + arr[x][y + 1];
	}





}
int main()
{
	//ios::sync_with_stdio(false);
	scanf("%d %d", &N, &M);


	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < M; j++)
		{
			scanf("%d", &arr[i][j]);
		}
	}

	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < M; j++)
		{
			visit_bfs[i][j] = false;
			visit_dfs[i][j] = false;
		}
	}


	queue < pair<int, int>> q;

	q.push(make_pair(0, 0));



	/*	while (!q.empty())
		{
			int x = q.front().first;
			int y = q.front().second;
			q.pop();

			visit_bfs[x][y] = true;
	*/

	for (int x = 0; x < N; x++)
	{
		for (int y = 0; y < M; y++)
		{

			dfs(x, y, arr[x][y], 0);
			crazy(x, y);
		}
	}
	/*	
		if (x + 1 < N&&visit_bfs[x+1][y] == false)
		{
			q.push(make_pair(x+1, y));
		}
		if (y + 1 < M&&visit_bfs[x][y+1] == false)
		{
			q.push(make_pair(x, y+1));
		}
		if (x - 1 >= 0&&visit_bfs[x-1][y] == false)
		{
			q.push(make_pair(x-1, y));
		}
		if (y- 1 >= 0&&visit_bfs[x][y-1] == false)
		{
			q.push(make_pair(x, y-1));
		}

		
	}
*/
	printf("%d\n", result);
	return 0;
}