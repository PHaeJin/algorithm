#include <iostream>
#include<string>
#include<vector>
#include<queue>
using namespace std;

struct my_struct {
	int x, y, depth;
};
int N;
bool visit[16][16];
int arr[16][16];
int dx[4] = { -1,1,0,0 };
int dy[4] = { 0,0,-1,1 };

int main() 
{
	int testcase,countT;
	
	cin >> testcase;
	
	countT = 1;
	while (testcase!=0)
	{
		cin >> N;
		for (int i = 0; i < N; i++)
		{
			for (int j = 0; j < N; j++)
			{
				cin >> arr[i][j];
				visit[i][j] = false;
			}
		}
		my_struct ms;
		int Endx, Endy;

		cin >> ms.x >> ms.y;
		cin >> Endx >> Endy;

		visit[ms.x][ms.y] = true;
		ms.depth = 0;
		queue<my_struct> q;
		q.push(ms);

		bool check_end = false;
		while (!q.empty())
		{
			ms = q.front();
			q.pop();
			int x = ms.x;
			int y = ms.y;
			int depth = ms.depth;
			if (x == Endx && y == Endy)
			{
				check_end = true;
				cout << "#" << countT++<<" " << depth << endl;
				break;
			}

			for (int i = 0; i < 4; i++)
			{
				int Gx = x + dx[i];
				int Gy = y + dy[i];
				if (Gx >= 0 && Gx < N&&Gy >= 0 && Gy < N && !visit[Gx][Gy] && arr[Gx][Gy] != 1)
				{
					if (arr[Gx][Gy] == 2)
					{
						if (depth % 3 == 2)
						{
							visit[Gx][Gy] = true;
							ms.x = Gx;
							ms.y = Gy;
							ms.depth = depth + 1;
							q.push(ms);
						}
						else
						{
							ms.x = x;
							ms.y = y;
							ms.depth = depth + 1;
							q.push(ms);
						}
					}
					else
					{
						visit[Gx][Gy] = true;
						ms.x = Gx;
						ms.y = Gy;
						ms.depth = depth + 1;
						q.push(ms);
					}
				}
			}
		}

		if (!check_end)
			cout << "#"<<countT++<<" -1" << endl;

		testcase--;
	}
	


	return 0;
}
