
#include<iostream>
#include<algorithm>
#include<math.h>
using namespace std;
int N;
int arr[101][101];
int memo[101][101];
int cnt[101][101];
int max_num(int a, int b)
{
	if (a > b)
		return a;
	else
		return b;

}
int count_c(int x,int y)
{
	if (x == N - 1)
	{
		return 1;
	}
	if (cnt[x][y] >= 0)
		return cnt[x][y];

	int ret;

	if (memo[x + 1][y] > memo[x + 1][y+1])
	{
		ret = count_c(x + 1,y);
	}

	if (memo[x + 1][y] < memo[x + 1][y + 1])
	{
		ret = count_c(x + 1, y+1);
	}
	if (memo[x + 1][y] == memo[x + 1][y + 1])
	{
		ret = count_c(x + 1, y)+ count_c(x + 1, y+1);
	}

	cnt[x][y] = ret;

	return ret;
}

int triangle(int x, int y)
{
	if (x == N - 1)
	{
		memo[x][y] = arr[x][y];
		return arr[x][y];
	}
	if (memo[x][y] >= 0)
		return memo[x][y];

	int ret;

	ret = max_num(triangle(x + 1, y), triangle(x + 1, y + 1)) + arr[x][y];

	memo[x][y] = ret;

	return ret;
}
int main()
{
	int testcase;
	cin >> testcase;
	while (testcase != 0)
	{
		cin >> N;
		for (int i = 0; i < N; i++)
		{
			for (int j = 0; j <= i; j++)
			{
				cin >> arr[i][j];
				memo[i][j] = -1;
				cnt[i][j] = -1;
			}
		}

		int ex = triangle(0, 0);

		int ret = count_c(0, 0);

		cout << ret << endl;
		testcase--;
	}
	
	return 0;
}

