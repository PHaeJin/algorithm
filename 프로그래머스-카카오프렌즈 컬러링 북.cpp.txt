#include<iostream>
#include<vector>
#include<algorithm>
#include<string>
#include<map>

using namespace std;
bool visit[101][101];
int check_count;

void calculate(int x, int y,int m,int n, vector<vector<int>> picture)
{
	visit[x][y] = true;

	if (x + 1 < m &&picture[x+1][y]==picture[x][y]&&!visit[x+1][y])
	{
		check_count++;
		calculate(x + 1, y, m, n, picture);
	}
	if (y + 1 < n &&picture[x][y+1] == picture[x][y] && !visit[x][y+1])
	{
		check_count++;
		calculate(x, y+1, m, n, picture);
	}
	if (x -1>=0 &&picture[x - 1][y] == picture[x][y] && !visit[x - 1][y])
	{
		check_count++;
		calculate(x - 1, y, m, n, picture);

	}
	if (y-1>=0 &&picture[x][y-1] == picture[x][y] && !visit[x][y-1])
	{
		check_count++;
		calculate(x, y-1, m, n, picture);
	}
}

vector<int> solution(int m, int n, vector<vector<int>> picture) {	
	int number_of_area = 0;
	
	int max_size_of_one_area = 0;
	
	for (int i = 0; i < m; i++)
	{
		for (int j = 0; j < n; j++)
		{
			visit[i][j] = false;
		}
	}

	for (int i = 0; i < m; i++)
	{
		for (int j = 0; j < n; j++)
		{
			if (picture[i][j] != 0 && !visit[i][j])
			{
				check_count = 1;
				calculate(i, j,m,n, picture);
				
				number_of_area++;
				
				if (max_size_of_one_area < check_count)
					max_size_of_one_area = check_count;
			
			}
		}
	}
	
	vector<int> answer(2);
	answer[0] = number_of_area;
	answer[1] = max_size_of_one_area;
	return answer;
}


int main()
{
	int m, n;
	vector<vector<int>> picture;

	cin >> m >> n;

	for (int i = 0; i < m; i++)
	{
		vector<int> sub_picture;
		for (int j = 0; j < n; j++)
		{
			int num;
			cin >> num;
			sub_picture.push_back(num);
		}
		picture.push_back(sub_picture);
	}

	vector<int> sol;
	
	sol = solution(m, n, picture);

	cout << sol[0] << " " << sol[1] << endl;

	return 0;

}