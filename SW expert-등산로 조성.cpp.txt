#include<iostream>
#include <queue>
#include <cstdio>
#include<algorithm>
#include<utility>

using namespace std;
int N;
int K;
int arr[9][9];
int Max_size = 0;
int result = 0;
int sol[51];
bool visit[9][9];

void dfs(int x, int y, int count)
{
	if (count > result)
		result = count;


	if (x + 1 < N&&arr[x][y] > arr[x + 1][y] && visit[x + 1][y] == false)
	{
		visit[x + 1][y] = true;
		dfs(x + 1, y, count + 1);
		visit[x + 1][y] = false;
	}

	if (y + 1 < N&&arr[x][y] > arr[x][y + 1] && visit[x][y + 1] == false)
	{
		visit[x][y + 1] = true;
		dfs(x, y + 1, count + 1);
		visit[x][y + 1] = false;
	}

	if (x - 1 >= 0 && arr[x][y] > arr[x - 1][y] && visit[x - 1][y] == false)
	{
		visit[x - 1][y] = true;
		dfs(x - 1, y, count + 1);
		visit[x - 1][y] = false;

	}

	if (y - 1 >= 0 && arr[x][y] > arr[x][y - 1] && visit[x][y - 1] == false)
	{
		visit[x][y - 1] = true;
		dfs(x, y - 1, count + 1);
		visit[x][y - 1] = false;
	}
}


int main()
{
	ios::sync_with_stdio(false);
//	cin.tie(NULL);

	int T, S;
	cin >> T;
	S = T;
	while (T != 0)
	{

		cin >> N >> K;

		Max_size = 0;
		result = 0;
		for (int i = 0; i < N; i++)
		{
			for (int j = 0; j < N; j++)
			{
				cin >> arr[i][j];
				if (arr[i][j] > Max_size)
					Max_size = arr[i][j];
				visit[i][j] = false;
			}
		}
		queue<pair<int, int>> q;

		for (int i = 0; i < N; i++)
		{
			for (int j = 0; j < N; j++)
			{
				if (arr[i][j] == Max_size)
					q.push(make_pair(i, j));
			}
		}

		while (!q.empty())
		{
			int Max_bong_x = q.front().first;
			int Max_bong_y = q.front().second;
			q.pop();

			for (int i = 0; i < N; i++)
			{
				for (int j = 0; j < N; j++)
				{
					if (!(i == Max_bong_x && j == Max_bong_y))
					{
						for (int k = 1; k <= K; k++)
						{
							for (int s = 0;s < N; s++)
							{
								for (int t = 0; t < N; t++)
								{
									visit[s][t] = false;
								}
							}
							if (arr[i][j] - k >= 0)
							{
								arr[i][j] -= k;
								dfs(Max_bong_x, Max_bong_y, 1);
								arr[i][j] += k;
							}
						}
					}
				}
			}
		}
		sol[T] = result;
		T--;
	}
	int check = 1;
	for (int i = S; i > 0; i--)
	{
		cout << "#" << check << " " << sol[i] << endl;
		check++;
	}
	return 0;
}


