#include <iostream>
#include<string>
#include<vector>
#include<queue>
#include<map>
#include<utility>

using namespace std;

int R, C;
char arr[26][26];
bool visit[26][26];
bool game_end = false;
char make_map[7] = { '|','-','+','1','2','3','4' };
int Mx, My, Zx, Zy;
int dx[4] = { -1,1,0,0 };
int dy[4] = { 0,0,-1,1 };
map<pair<int, int>, int> m;

void dfs(int x, int y,int check)
{
	visit[x][y] = true;
	//cout << x << " " << y << " "<<check<<endl;


	if (x == Zx && y == Zy)
	{
		game_end = true;
		return;
	}
		int Gx = x + dx[check];
		int Gy = y + dy[check];

		if (Gx >= 0 && Gx < R&&Gy >= 0 && Gy < C&&arr[Gx][Gy] != '.')
		{
			if (arr[Gx][Gy] == '|' && !visit[Gx][Gy])
			{
				if (check == 0||check==1)
				{
					dfs(Gx, Gy,check);
				}
			}
			else if (arr[Gx][Gy] == '-' && !visit[Gx][Gy])
			{
				if (check == 2 || check == 3)
				{
					dfs(Gx, Gy, check);
				}
			}
			else if (arr[Gx][Gy] == '+')
			{
				if (check == 1 || check == 0)
				{
					if (m[make_pair(Gx, Gy)] == 4)
					{
						m[make_pair(Gx, Gy)] = 2;
						dfs(Gx, Gy, check);
					}
					else if (m[make_pair(Gx, Gy)] == 3)
					{
						m[make_pair(Gx, Gy)] = 1;
						dfs(Gx, Gy, check);
					}
				}
				else if (check == 2 || check == 3)
				{
					if (m[make_pair(Gx, Gy)] == 4)
					{
						m[make_pair(Gx, Gy)] = 3;
						dfs(Gx, Gy, check);
					}
					else if (m[make_pair(Gx, Gy)] == 2)
					{
						m[make_pair(Gx, Gy)] = 1;
						dfs(Gx, Gy, check);
					}
				}
			}
			else if (arr[Gx][Gy] == '1' && !visit[Gx][Gy])
			{
				if (check == 0)
				{
					dfs(Gx, Gy,3);
				}
				else if (check == 2)
				{
					dfs(Gx, Gy, 1);
				}
			}
			else if (arr[Gx][Gy] == '2' && !visit[Gx][Gy])
			{
				if (check == 1)
				{
					dfs(Gx, Gy,3);
				}
				else if (check == 2)
				{
					dfs(Gx, Gy, 0);
				}
			}
			else if (arr[Gx][Gy] == '3' && !visit[Gx][Gy])
			{
				if (check == 1)
				{
					dfs(Gx, Gy, 2);
				}
				else if (check == 3)
				{
					dfs(Gx, Gy, 0);
				}
			}
			else if (arr[Gx][Gy] == '4' && !visit[Gx][Gy])
			{
				if (check == 0)
				{
					dfs(Gx, Gy, 2);
				}
				else if (check == 3)
				{
					dfs(Gx, Gy, 1);
				}
			}
			else if (arr[Gx][Gy] == 'Z' && !visit[Gx][Gy])
			{
				dfs(Gx, Gy, check);
			}
		}
	
		
}

void init_visit()
{
	game_end = false;
	map<pair<int, int>, int> ex;
	m = ex;

	for (int i = 0; i < R; i++)
	{
		for (int j = 0; j < C; j++)
		{
			visit[i][j] = false;
			if(arr[i][j]=='+')
				m[make_pair(i, j)] = 4;			
		}
	}
}
int main() 
{
	cin >> R >> C;
	
	for (int i = 0; i < R; i++)
	{
		for (int j = 0; j < C; j++)
		{
			cin >> arr[i][j];
			if (arr[i][j] == 'M')
			{
				Mx = i;
				My = j;
			}
			else if (arr[i][j] == 'Z')
			{
				Zx = i;
				Zy = j;
			}
			else if (arr[i][j] == '+')
			{
				m[make_pair(i, j)] = 4;
			}
		}
	}

	for (int i = 0; i < R; i++)
	{
		for (int j = 0; j < C; j++)
		{
			if (arr[i][j] == '.')
			{
				for (int s = 0; s < 7; s++)
				{
					arr[i][j] = make_map[s];
					
					for (int t = 0; t < 4; t++)
					{
						int Gx = Mx + dx[t];
						int Gy = My + dy[t];
						int retT = t;
						if (Gx >= 0 && Gx < R&&Gy >= 0 && Gy < C&&arr[Gx][Gy] != '.')
						{
							bool is_ok = false;
							init_visit();
							visit[Mx][My] = true;

							if (arr[Gx][Gy] == '|')
							{
								if (t == 1 || t == 0)
									is_ok = true;
							}
							else if (arr[Gx][Gy] == '-')
							{
								if (t == 2 || t == 3)
									is_ok = true;
							}
							else if (arr[Gx][Gy] == '+')
							{
								if (t == 1 || t == 0)
								{
									m[make_pair(Gx, Gy)] = 2;
									is_ok = true;
								}
								else if (t == 2 || t == 3)
								{
									m[make_pair(Gx, Gy)] = 3;
									is_ok = true;									
								}
							}
							else if (arr[Gx][Gy] == '1')
							{
								if (t == 0)
								{
									retT = 3;
									is_ok = true;
								}
								else if (t == 2)
								{
									retT = 1;
									is_ok = true;
								}
							}
							else if (arr[Gx][Gy] == '2')
							{
								if (t == 1)
								{
									retT = 3;
									is_ok = true;
								}
								else if (t == 2)
								{
									retT = 0;
									is_ok = true;
								}
							}
							else if (arr[Gx][Gy] == '3')
							{
								if (t == 1)
								{
									retT = 2;
									is_ok = true;
								}
								else if (t == 3)
								{
									retT = 0;
									is_ok = true;
								}
							}
							else if (arr[Gx][Gy] == '4')
							{
								if (t == 0)
								{
									retT = 2;
									is_ok = true;
								}
								else if (t == 3)
								{
									retT = 1;
									is_ok = true;
								}
							}
								
							if(is_ok)
							dfs(Gx, Gy, retT);
							
							if (game_end)
							{
								bool last_check = true;

								for (int A = 0; A < R; A++)
								{
									for (int B = 0; B < C; B++)
									{
										if (arr[A][B] != '.' && !visit[A][B])
											last_check = false;
									}
								}
								if (last_check)
								{
									cout << i + 1 << " " << j + 1 << " " << make_map[s] << endl;
									return 0;
								}								
							}
						}
					}


					
				}
				arr[i][j] = '.';
			}
		}
	}

	return 0;
}
