
#include<iostream>
#include<algorithm>
#include<math.h>
#include<vector>
#include<string>
using namespace std;
int N, W;
string p_name[101];
int p_w[101];
int p_jur[101];
int memo[1001][101];
vector<string> v;

int max_num(int a, int b)
{
	if (a > b)
		return a;
	else
		return b;
}
int PACKING(int capacity,int index)
{
	if (index == N)
		return 0;
	
	if (memo[capacity][index] >= 0)
		return memo[capacity][index];

	int ret = 0;

	ret = PACKING(capacity, index + 1);

	if (capacity - p_w[index] >= 0)
	{
		ret = max_num(ret, PACKING(capacity - p_w[index], index + 1) + p_jur[index]);
	}
	memo[capacity][index] = ret;
	return ret;
}
void trace_s(int capacity, int index)
{
	if (index == N)
		return;
	if (PACKING(capacity, index) == PACKING(capacity, index + 1))
	{
		trace_s(capacity, index + 1);
	}
	else
	{
		v.push_back(p_name[index]);
		trace_s(capacity - p_w[index], index + 1);
	}
}
int main()
{
	int testcase;
	cin >> testcase;
	while (testcase != 0)
	{
		v.clear();
		cin >> N >> W;

		for (int i = 0; i < N; i++)
		{
			cin >> p_name[i] >> p_w[i] >> p_jur[i];
		}
		for (int i = 0; i < 1001; i++)
		{
			for (int j = 0; j < 101; j++)
			{
				memo[i][j] = -1;
			}
		}
		int result = PACKING(W, 0);//³²Àº capacity:W, index
		trace_s(W, 0);


		cout << result << " " << v.size() << endl;
		for (int i = 0; i < v.size(); i++)
			cout << v[i] << endl;
		
		testcase--;
	}
	
	return 0;
}

