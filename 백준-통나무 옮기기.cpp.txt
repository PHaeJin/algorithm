#include <iostream>
#include<stack>
#include<string>
#include<algorithm>
#include<queue>
#include<map>
#include<utility>
using namespace std;

struct Tree {
	int P1_X = -1;
	int P1_Y;
	int P2_X = -1;
	int P2_Y;
	int P3_X = -1;
	int P3_Y;
	int Shape;
	int depth;
};

int arr[51][51];
map<tuple<int, int, int>, int> m;

int dx[8] = {-1,-1,-1,0,1,1,1,0};
int dy[8] = { -1,0,1,1,1,0,-1,-1};

int N;

int main() 
{
	
	cin >> N;
	
	Tree t;

	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < N; j++)
		{
			char c;
			cin >> c;
			if (c == 'B')
			{
				if (t.P1_X == -1)
				{
					t.P1_X = i;
					t.P1_Y = j;
				}
				else if (t.P2_X == -1)
				{
					t.P2_X = i;
					t.P2_Y = j;
				}
				else if (t.P3_X == -1)
				{
					t.P3_X = i;
					t.P3_Y = j;
				}
				arr[i][j] = 2;
			}
			if (c == 'E')
				arr[i][j] = 3;
			if (c == '1')
				arr[i][j] = 1;
			if (c == '0')
				arr[i][j] = 0;
		}
	}

	if (t.P1_X - t.P2_X != 0)
		t.Shape = 1;
	else
		t.Shape = 2;

	t.depth = 0;

	queue<Tree> q;
	m[make_tuple(t.P1_X*N + t.P1_Y, t.P2_X*N + t.P2_Y, t.P3_X*N + t.P3_Y)] = 1;
	q.push(t);
	bool game_end = false;

	while (!q.empty())
	{
		Tree t = q.front();
		q.pop();
		
		if (arr[t.P1_X][t.P1_Y] == 3 && arr[t.P2_X][t.P2_Y] == 3 && arr[t.P3_X][t.P3_Y] == 3)
		{
			cout << t.depth << endl;
			game_end = true;
			break;
		}
		bool check_range;

		if (t.Shape == 1)
		{
			Tree ex_t = t;
			ex_t.P3_X = ex_t.P2_X;
			ex_t.P2_X = ex_t.P1_X;
			ex_t.P1_X = ex_t.P1_X - 1;
			
			if (ex_t.P1_X >= 0 && ex_t.P1_X < N&&ex_t.P1_Y >= 0 && ex_t.P1_Y < N&&ex_t.P2_X >= 0 && ex_t.P2_X < N&&ex_t.P2_Y >= 0 && ex_t.P2_Y < N&&ex_t.P3_X >= 0 && ex_t.P3_X < N&&ex_t.P3_Y >= 0 && ex_t.P3_Y < N)
				check_range = true;
			else
				check_range = false;

			if (check_range && arr[ex_t.P1_X][ex_t.P1_Y] != 1 && m.count(make_tuple(ex_t.P1_X*N + ex_t.P1_Y, ex_t.P2_X*N + ex_t.P2_Y, ex_t.P3_X*N + ex_t.P3_Y))==0)
			{
				m[make_tuple(ex_t.P1_X*N + ex_t.P1_Y, ex_t.P2_X*N + ex_t.P2_Y, ex_t.P3_X*N + ex_t.P3_Y)] = 1;
				ex_t.depth++;
				q.push(ex_t);
			}
			//U
			ex_t = t;
			ex_t.P1_X = ex_t.P2_X;
			ex_t.P2_X = ex_t.P3_X;
			ex_t.P3_X = ex_t.P3_X + 1;

			if (ex_t.P1_X >= 0 && ex_t.P1_X < N&&ex_t.P1_Y >= 0 && ex_t.P1_Y < N&&ex_t.P2_X >= 0 && ex_t.P2_X < N&&ex_t.P2_Y >= 0 && ex_t.P2_Y < N&&ex_t.P3_X >= 0 && ex_t.P3_X < N&&ex_t.P3_Y >= 0 && ex_t.P3_Y < N)
				check_range = true;
			else
				check_range = false;

			if (check_range && arr[ex_t.P3_X][ex_t.P3_Y] != 1 && m.count(make_tuple(ex_t.P1_X*N + ex_t.P1_Y, ex_t.P2_X*N + ex_t.P2_Y, ex_t.P3_X*N + ex_t.P3_Y)) == 0)
			{
				m[make_tuple(ex_t.P1_X*N + ex_t.P1_Y, ex_t.P2_X*N + ex_t.P2_Y, ex_t.P3_X*N + ex_t.P3_Y)] = 1;
				ex_t.depth++;
				q.push(ex_t);
			}
			//D
			ex_t = t;
			ex_t.P1_Y = ex_t.P1_Y-1;
			ex_t.P2_Y = ex_t.P2_Y-1;
			ex_t.P3_Y = ex_t.P3_Y-1;

			if (ex_t.P1_X >= 0 && ex_t.P1_X < N&&ex_t.P1_Y >= 0 && ex_t.P1_Y < N&&ex_t.P2_X >= 0 && ex_t.P2_X < N&&ex_t.P2_Y >= 0 && ex_t.P2_Y < N&&ex_t.P3_X >= 0 && ex_t.P3_X < N&&ex_t.P3_Y >= 0 && ex_t.P3_Y < N)
				check_range = true;
			else
				check_range = false;

			if (check_range&& arr[ex_t.P1_X][ex_t.P1_Y] != 1 && arr[ex_t.P2_X][ex_t.P2_Y] != 1 && arr[ex_t.P3_X][ex_t.P3_Y] != 1 && m.count(make_tuple(ex_t.P1_X*N + ex_t.P1_Y, ex_t.P2_X*N + ex_t.P2_Y, ex_t.P3_X*N + ex_t.P3_Y)) == 0)
			{
				m[make_tuple(ex_t.P1_X*N + ex_t.P1_Y, ex_t.P2_X*N + ex_t.P2_Y, ex_t.P3_X*N + ex_t.P3_Y)] = 1;
				ex_t.depth++;
				q.push(ex_t);
			}
			//L
			ex_t = t;
			ex_t.P1_Y = ex_t.P1_Y + 1;
			ex_t.P2_Y = ex_t.P2_Y + 1;
			ex_t.P3_Y = ex_t.P3_Y + 1;

			if (ex_t.P1_X >= 0 && ex_t.P1_X < N&&ex_t.P1_Y >= 0 && ex_t.P1_Y < N&&ex_t.P2_X >= 0 && ex_t.P2_X < N&&ex_t.P2_Y >= 0 && ex_t.P2_Y < N&&ex_t.P3_X >= 0 && ex_t.P3_X < N&&ex_t.P3_Y >= 0 && ex_t.P3_Y < N)
				check_range = true;
			else
				check_range = false;

			if (check_range && arr[ex_t.P1_X][ex_t.P1_Y] != 1 && arr[ex_t.P2_X][ex_t.P2_Y] != 1 && arr[ex_t.P3_X][ex_t.P3_Y] != 1 && m.count(make_tuple(ex_t.P1_X*N + ex_t.P1_Y, ex_t.P2_X*N + ex_t.P2_Y, ex_t.P3_X*N + ex_t.P3_Y)) == 0)
			{
				m[make_tuple(ex_t.P1_X*N + ex_t.P1_Y, ex_t.P2_X*N + ex_t.P2_Y, ex_t.P3_X*N + ex_t.P3_Y)] = 1;
				ex_t.depth++;
				q.push(ex_t);
			}
			//R
			ex_t = t;
			ex_t.P1_Y = ex_t.P1_Y - 1;
			ex_t.P1_X = ex_t.P1_X + 1;

			ex_t.P3_Y = ex_t.P3_Y + 1;
			ex_t.P3_X = ex_t.P3_X - 1;
			bool rotate_ok = true;

			for (int s = 0; s < 8; s++)
			{
				int Gx = ex_t.P2_X + dx[s];
				int Gy = ex_t.P2_Y + dy[s];
				if (Gx>=0&&Gx<N&&Gy >= 0 && Gy<N&&arr[Gx][Gy] == 1)
					rotate_ok = false;
			}
			if (ex_t.P1_X >= 0 && ex_t.P1_X < N&&ex_t.P1_Y >= 0 && ex_t.P1_Y < N&&ex_t.P2_X >= 0 && ex_t.P2_X < N&&ex_t.P2_Y >= 0 && ex_t.P2_Y < N&&ex_t.P3_X >= 0 && ex_t.P3_X < N&&ex_t.P3_Y >= 0 && ex_t.P3_Y < N)
				check_range = true;
			else
				check_range = false;

			if (check_range&& rotate_ok &&m.count(make_tuple(ex_t.P1_X*N + ex_t.P1_Y, ex_t.P2_X*N + ex_t.P2_Y, ex_t.P3_X*N + ex_t.P3_Y)) == 0)
			{
				m[make_tuple(ex_t.P1_X*N + ex_t.P1_Y, ex_t.P2_X*N + ex_t.P2_Y, ex_t.P3_X*N + ex_t.P3_Y)] = 1;
				ex_t.depth++;
				ex_t.Shape = 2;
				q.push(ex_t);
			}
			//T
		}
		else
		{
			Tree ex_t = t;
			ex_t.P3_X = ex_t.P3_X - 1;
			ex_t.P2_X = ex_t.P2_X - 1;
			ex_t.P1_X = ex_t.P1_X - 1;

			if (ex_t.P1_X >= 0 && ex_t.P1_X < N&&ex_t.P1_Y >= 0 && ex_t.P1_Y < N&&ex_t.P2_X >= 0 && ex_t.P2_X < N&&ex_t.P2_Y >= 0 && ex_t.P2_Y < N&&ex_t.P3_X >= 0 && ex_t.P3_X < N&&ex_t.P3_Y >= 0 && ex_t.P3_Y < N)
				check_range = true;
			else
				check_range = false;
			if (check_range && arr[ex_t.P1_X][ex_t.P1_Y] != 1 && arr[ex_t.P2_X][ex_t.P2_Y] != 1 && arr[ex_t.P3_X][ex_t.P3_Y] != 1 && m.count(make_tuple(ex_t.P1_X*N + ex_t.P1_Y, ex_t.P2_X*N + ex_t.P2_Y, ex_t.P3_X*N + ex_t.P3_Y)) == 0)
			{
				m[make_tuple(ex_t.P1_X*N + ex_t.P1_Y, ex_t.P2_X*N + ex_t.P2_Y, ex_t.P3_X*N + ex_t.P3_Y)] = 1;
				ex_t.depth++;
				q.push(ex_t);
			}
			//U

			ex_t = t;
			ex_t.P1_X = ex_t.P1_X+1;
			ex_t.P2_X = ex_t.P2_X + 1;
			ex_t.P3_X = ex_t.P3_X + 1;
			if (ex_t.P1_X >= 0 && ex_t.P1_X < N&&ex_t.P1_Y >= 0 && ex_t.P1_Y < N&&ex_t.P2_X >= 0 && ex_t.P2_X < N&&ex_t.P2_Y >= 0 && ex_t.P2_Y < N&&ex_t.P3_X >= 0 && ex_t.P3_X < N&&ex_t.P3_Y >= 0 && ex_t.P3_Y < N)
				check_range = true;
			else
				check_range = false;
			if (check_range  && arr[ex_t.P3_X][ex_t.P3_Y] != 1 && arr[ex_t.P2_X][ex_t.P2_Y] != 1 && arr[ex_t.P1_X][ex_t.P1_Y] != 1 && m.count(make_tuple(ex_t.P1_X*N + ex_t.P1_Y, ex_t.P2_X*N + ex_t.P2_Y, ex_t.P3_X*N + ex_t.P3_Y)) == 0)
			{
				m[make_tuple(ex_t.P1_X*N + ex_t.P1_Y, ex_t.P2_X*N + ex_t.P2_Y, ex_t.P3_X*N + ex_t.P3_Y)] = 1;
				ex_t.depth++;
				q.push(ex_t);
			}
			//D

			ex_t = t;
			
			ex_t.P3_Y = ex_t.P2_Y;
			ex_t.P2_Y = ex_t.P1_Y;
			ex_t.P1_Y = ex_t.P1_Y - 1;
			if (ex_t.P1_X >= 0 && ex_t.P1_X < N&&ex_t.P1_Y >= 0 && ex_t.P1_Y < N&&ex_t.P2_X >= 0 && ex_t.P2_X < N&&ex_t.P2_Y >= 0 && ex_t.P2_Y < N&&ex_t.P3_X >= 0 && ex_t.P3_X < N&&ex_t.P3_Y >= 0 && ex_t.P3_Y < N)
				check_range = true;
			else
				check_range = false;
			if (check_range && arr[ex_t.P1_X][ex_t.P1_Y] != 1 && m.count(make_tuple(ex_t.P1_X*N + ex_t.P1_Y, ex_t.P2_X*N + ex_t.P2_Y, ex_t.P3_X*N + ex_t.P3_Y)) == 0)
			{
				m[make_tuple(ex_t.P1_X*N + ex_t.P1_Y, ex_t.P2_X*N + ex_t.P2_Y, ex_t.P3_X*N + ex_t.P3_Y)] = 1;
				ex_t.depth++;
				q.push(ex_t);
			}
			//L
			ex_t = t;
			ex_t.P1_Y = ex_t.P2_Y;
			ex_t.P2_Y = ex_t.P3_Y;
			ex_t.P3_Y = ex_t.P3_Y + 1;
			if (ex_t.P1_X >= 0 && ex_t.P1_X < N&&ex_t.P1_Y >= 0 && ex_t.P1_Y < N&&ex_t.P2_X >= 0 && ex_t.P2_X < N&&ex_t.P2_Y >= 0 && ex_t.P2_Y < N&&ex_t.P3_X >= 0 && ex_t.P3_X < N&&ex_t.P3_Y >= 0 && ex_t.P3_Y < N)
				check_range = true;
			else
				check_range = false;
			if (check_range && arr[ex_t.P3_X][ex_t.P3_Y] != 1 && m.count(make_tuple(ex_t.P1_X*N + ex_t.P1_Y, ex_t.P2_X*N + ex_t.P2_Y, ex_t.P3_X*N + ex_t.P3_Y)) == 0)
			{
				m[make_tuple(ex_t.P1_X*N + ex_t.P1_Y, ex_t.P2_X*N + ex_t.P2_Y, ex_t.P3_X*N + ex_t.P3_Y)] = 1;
				ex_t.depth++;
				q.push(ex_t);
			}
			//R
			ex_t = t;
			
			ex_t.P1_Y = ex_t.P1_Y + 1;
			ex_t.P1_X = ex_t.P1_X - 1;

			ex_t.P3_Y = ex_t.P3_Y - 1;
			ex_t.P3_X = ex_t.P3_X + 1;
			
			bool rotate_ok = true;

			for (int s = 0; s < 8; s++)
			{
				int Gx = ex_t.P2_X + dx[s];
				int Gy = ex_t.P2_Y + dy[s];
				if (Gx >= 0 && Gx<N&&Gy >= 0 && Gy<N&&arr[Gx][Gy] == 1)
					rotate_ok = false;
			}
			if (ex_t.P1_X >= 0 && ex_t.P1_X < N&&ex_t.P1_Y >= 0 && ex_t.P1_Y < N&&ex_t.P2_X >= 0 && ex_t.P2_X < N&&ex_t.P2_Y >= 0 && ex_t.P2_Y < N&&ex_t.P3_X >= 0 && ex_t.P3_X < N&&ex_t.P3_Y >= 0 && ex_t.P3_Y < N)
				check_range = true;
			else
				check_range = false;
			if (check_range && rotate_ok && m.count(make_tuple(ex_t.P1_X*N + ex_t.P1_Y, ex_t.P2_X*N + ex_t.P2_Y, ex_t.P3_X*N + ex_t.P3_Y)) == 0)
			{
				m[make_tuple(ex_t.P1_X*N + ex_t.P1_Y, ex_t.P2_X*N + ex_t.P2_Y, ex_t.P3_X*N + ex_t.P3_Y)] = 1;
				ex_t.depth++;
				ex_t.Shape = 1;
				q.push(ex_t);
			}
			//T
		}

	}
	if (!game_end)
		cout << "0" << endl;

	return 0;
}
