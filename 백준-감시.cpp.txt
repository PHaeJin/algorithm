#include<iostream>
#include<vector>
#include<algorithm>
#include<utility>
#include<queue>
using namespace std;
int N, M;
int arr[9][9];
int op[9][9];
int visit[9][9];
vector<vector <int> > st_arr;

int result = numeric_limits<int>::max();

void dfs(vector<int> CT)
{


	bool check_end=true;
	int CT_num;
	int X, Y;
	
	for (int i = 0; i < 5; i++)
	{
		if (CT[i] != 0)
		{
			check_end = false;
			CT_num = i;
			CT[i]--;
			break;
		}
	}
	if (check_end)
	{
		vector<vector <int> > cal_arr = st_arr;

		for (int i = 0; i < N; i++)
		{
			for (int j = 0; j < M; j++)
			{
				if (op[i][j] != 0)
				{
					if (arr[i][j] == 1)
					{
						if (op[i][j] == 1)
						{
							for (int y = j+1; y < M; y++)
							{
								if (cal_arr[i][y] == 0)
									cal_arr[i][y] = -1;
								else if (cal_arr[i][y] == 6)
									break;
							}
						}
						else if (op[i][j] == 2)
						{
							for (int x = i - 1; x >=0; x--)
							{
								if (cal_arr[x][j] == 0)
									cal_arr[x][j] = -1;
								else if (cal_arr[x][j] == 6)
									break;
							}
						}
						else if (op[i][j] == 3)
						{
							for (int y = j - 1; y >=0; y--)
							{
								if (cal_arr[i][y] == 0)
									cal_arr[i][y] = -1;
								else if (cal_arr[i][y] == 6)
									break;
							}
						}
						else if (op[i][j] == 4)
						{
							for (int x = i + 1; x <N; x++)
							{
								if (cal_arr[x][j] == 0)
									cal_arr[x][j] = -1;
								else if (cal_arr[x][j] == 6)
									break;
							}
						}
					}
					else if (arr[i][j] == 2)
					{
						if (op[i][j] == 1)
						{
							for (int y = j - 1; y >= 0; y--)
							{
								if (cal_arr[i][y] == 0)
									cal_arr[i][y] = -1;
								else if (cal_arr[i][y] == 6)
									break;
							}
							for (int y = j + 1; y < M; y++)
							{
								if (cal_arr[i][y] == 0)
									cal_arr[i][y] = -1;
								else if (cal_arr[i][y] == 6)
									break;
							}
						}
						else if (op[i][j] == 2)
						{
							for (int x = i + 1; x <N; x++)
							{
								if (cal_arr[x][j] == 0)
									cal_arr[x][j] = -1;
								else if (cal_arr[x][j] == 6)
									break;
							}
							for (int x = i - 1; x >= 0; x--)
							{
								if (cal_arr[x][j] == 0)
									cal_arr[x][j] = -1;
								else if (cal_arr[x][j] == 6)
									break;
							}
						}
					}
					else if (arr[i][j] == 3)
					{
						if (op[i][j] == 1)
						{
							for (int x = i - 1; x >= 0; x--)
							{
								if (cal_arr[x][j] == 0)
									cal_arr[x][j] = -1;
								else if (cal_arr[x][j] == 6)
									break;
							}
							for (int y = j + 1; y < M; y++)
							{
								if (cal_arr[i][y] == 0)
									cal_arr[i][y] = -1;
								else if (cal_arr[i][y] == 6)
									break;
							}
						}
						else if (op[i][j] == 2)
						{
							for (int x = i - 1; x >= 0; x--)
							{
								if (cal_arr[x][j] == 0)
									cal_arr[x][j] = -1;
								else if (cal_arr[x][j] == 6)
									break;
							}
							for (int y = j - 1; y >= 0; y--)
							{
								if (cal_arr[i][y] == 0)
									cal_arr[i][y] = -1;
								else if (cal_arr[i][y] == 6)
									break;
							}
						}
						else if (op[i][j] == 3)
						{
							for (int y = j - 1; y >= 0; y--)
							{
								if (cal_arr[i][y] == 0)
									cal_arr[i][y] = -1;
								else if (cal_arr[i][y] == 6)
									break;
							}
							for (int x = i + 1; x <N; x++)
							{
								if (cal_arr[x][j] == 0)
									cal_arr[x][j] = -1;
								else if (cal_arr[x][j] == 6)
									break;
							}
						}
						else if (op[i][j] == 4)
						{
							for (int x = i + 1; x <N; x++)
							{
								if (cal_arr[x][j] == 0)
									cal_arr[x][j] = -1;
								else if (cal_arr[x][j] == 6)
									break;
							}
							for (int y = j + 1; y < M; y++)
							{
								if (cal_arr[i][y] == 0)
									cal_arr[i][y] = -1;
								else if (cal_arr[i][y] == 6)
									break;
							}
						}
					}
					else if (arr[i][j] == 4)
					{
						if (op[i][j] == 1)
						{
							for (int x = i - 1; x >= 0; x--)
							{
								if (cal_arr[x][j] == 0)
									cal_arr[x][j] = -1;
								else if (cal_arr[x][j] == 6)
									break;
							}
							for (int y = j - 1; y >= 0; y--)
							{
								if (cal_arr[i][y] == 0)
									cal_arr[i][y] = -1;
								else if (cal_arr[i][y] == 6)
									break;
							}
							for (int y = j + 1; y < M; y++)
							{
								if (cal_arr[i][y] == 0)
									cal_arr[i][y] = -1;
								else if (cal_arr[i][y] == 6)
									break;
							}
						}
						else if (op[i][j] == 2)
						{
							for (int x = i - 1; x >= 0; x--)
							{
								if (cal_arr[x][j] == 0)
									cal_arr[x][j] = -1;
								else if (cal_arr[x][j] == 6)
									break;
							}
							for (int y = j - 1; y >= 0; y--)
							{
								if (cal_arr[i][y] == 0)
									cal_arr[i][y] = -1;
								else if (cal_arr[i][y] == 6)
									break;
							}
							for (int x = i + 1; x <N; x++)
							{
								if (cal_arr[x][j] == 0)
									cal_arr[x][j] = -1;
								else if (cal_arr[x][j] == 6)
									break;
							}
						}
						else if (op[i][j] == 3)
						{
							for (int y = j - 1; y >= 0; y--)
							{
								if (cal_arr[i][y] == 0)
									cal_arr[i][y] = -1;
								else if (cal_arr[i][y] == 6)
									break;
							}
							for (int x = i + 1; x <N; x++)
							{
								if (cal_arr[x][j] == 0)
									cal_arr[x][j] = -1;
								else if (cal_arr[x][j] == 6)
									break;
							}
							for (int y = j + 1; y < M; y++)
							{
								if (cal_arr[i][y] == 0)
									cal_arr[i][y] = -1;
								else if (cal_arr[i][y] == 6)
									break;
							}
						}
						else if (op[i][j] == 4)
						{
							for (int x = i + 1; x <N; x++)
							{
								if (cal_arr[x][j] == 0)
									cal_arr[x][j] = -1;
								else if (cal_arr[x][j] == 6)
									break;
							}
							for (int y = j + 1; y < M; y++)
							{
								if (cal_arr[i][y] == 0)
									cal_arr[i][y] = -1;
								else if (cal_arr[i][y] == 6)
									break;
							}
							for (int x = i - 1; x >= 0; x--)
							{
								if (cal_arr[x][j] == 0)
									cal_arr[x][j] = -1;
								else if (cal_arr[x][j] == 6)
									break;
							}
						}
					}
					else if (arr[i][j] == 5)
					{
						if (op[i][j] == 1)
						{
							for (int x = i + 1; x <N; x++)
							{
								if (cal_arr[x][j] == 0)
									cal_arr[x][j] = -1;
								else if (cal_arr[x][j] == 6)
									break;
							}
							for (int y = j + 1; y < M; y++)
							{
								if (cal_arr[i][y] == 0)
									cal_arr[i][y] = -1;
								else if (cal_arr[i][y] == 6)
									break;
							}
							for (int x = i - 1; x >= 0; x--)
							{
								if (cal_arr[x][j] == 0)
									cal_arr[x][j] = -1;
								else if (cal_arr[x][j] == 6)
									break;
							}
							for (int y = j - 1; y >= 0; y--)
							{
								if (cal_arr[i][y] == 0)
									cal_arr[i][y] = -1;
								else if (cal_arr[i][y] == 6)
									break;
							}
						}
						
						
					}
				}
			}
		}

		int count_c = 0;
	
		for (int i = 0; i < N; i++)
		{
			for (int j = 0; j < M; j++)
			{
				if (cal_arr[i][j] == 0)
					count_c++;
			}
		}

		if (result > count_c)
			result = count_c;

		
		return;
	}
	
	
	bool check_b = false;

	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < M; j++)
		{
			if ((arr[i][j] == CT_num + 1&&!visit[i][j]))
			{
				
				X = i;
				Y = j;
				check_b = true;
				visit[i][j] = true;
				break;
			}
		}
		if (check_b)
		{
			break;
		}
	}

	
		if (CT_num == 0)
		{
			op[X][Y] = 1;
			dfs(CT);
			op[X][Y] = 2;
			dfs(CT);
			op[X][Y] = 3;
			dfs(CT);
			op[X][Y] = 4;
			dfs(CT);

		}
		else if (CT_num == 1)
		{
			op[X][Y] = 1;
			dfs(CT);
			op[X][Y] = 2;
			dfs(CT);
		}
		else if (CT_num == 2)
		{
			op[X][Y] = 1;
			dfs(CT);
			op[X][Y] = 2;
			dfs(CT);
			op[X][Y] = 3;
			dfs(CT);
			op[X][Y] = 4;
			dfs(CT);

		}
		else if (CT_num == 3)
		{
			op[X][Y] = 1;
			dfs(CT);
			op[X][Y] = 2;
			dfs(CT);
			op[X][Y] = 3;
			dfs(CT);
			op[X][Y] = 4;
			dfs(CT);
		}
		else if (CT_num == 4)
		{
			op[X][Y] = 1;
			dfs(CT);
		}
	
		visit[X][Y] = false;

	return;
}

int main()
{
	cin >> N >> M;
	
	vector<int> CT;
	int visit[9][9];

	for (int i = 0; i < 5; i++)
	{
		CT.push_back(0);
	}
	

	for (int i = 0; i < N; i++)
	{
		vector<int> v;
		for (int j = 0; j < M; j++)
		{
			cin >> arr[i][j];
			if (arr[i][j] != 0 && arr[i][j] != 6)
			{
				CT[arr[i][j] - 1]++;
			}
			v.push_back(arr[i][j]);
			op[i][j] = 0;
			visit[i][j] = false;
		}
		st_arr.push_back(v);
	}

	dfs(CT);

	cout << result << endl;

	return 0;
}

