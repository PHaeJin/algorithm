#include<iostream>
#include<vector>
#include<algorithm>
#include<queue>
#include<utility>
#include<map>
using namespace std;

map<vector<int>, int> m;


int main()
{
	int A, B, C;

	cin >> A >> B >> C;

	vector<int> v;
	v.push_back(0);
	v.push_back(0);
	v.push_back(C);
	
	m[v] = 1;

	queue<vector<int>> q;

	q.push(v);

	vector<int> result;
	vector<int> ex_v(3);
	
	while (!q.empty())
	{
		v = q.front();
		q.pop();
		
		if (v[0] == 0)
		{
			result.push_back(v[2]);
		}

		if (v[0] != 0)
		{
			if (v[1] < B)
			{
				ex_v[1] = v[1] + v[0];
				if (ex_v[1] > B)
				{
					ex_v[0] = ex_v[1] - B;
					ex_v[1] = B;					
				}
				else
				{
					ex_v[0] = 0;
				}
				ex_v[2] = v[2];
				if (m.count(ex_v) == 0)
				{
					m[ex_v] = 1;
					q.push(ex_v);
				}
			}

			if (v[2] < C)
			{
				ex_v[2] = v[2] + v[0];
				if (ex_v[2] > C)
				{
					ex_v[0] = ex_v[2] - C;
					ex_v[2] = C;
				}
				else
				{
					ex_v[0] = 0;
				}
				ex_v[1] = v[1];
				if (m.count(ex_v) == 0)
				{
					m[ex_v] = 1;
					q.push(ex_v);
				}
			}
		}

		if (v[1] != 0)
		{
			if (v[0] < A)
			{
				ex_v[0] = v[0] + v[1];
				if (ex_v[0] > A)
				{
					ex_v[1] = ex_v[0] - A;
					ex_v[0] = A;
				}
				else
				{
					ex_v[1] = 0;
				}
				ex_v[2] = v[2];
				if (m.count(ex_v) == 0)
				{
					m[ex_v] = 1;
					q.push(ex_v);
				}
			}

			if (v[2] < C)
			{
				ex_v[2] = v[2] + v[1];
				if (ex_v[2] > C)
				{
					ex_v[1] = ex_v[2] - C;
					ex_v[2] = C;
				}
				else
				{
					ex_v[1] = 0;
				}
				ex_v[0] = v[0];
				if (m.count(ex_v) == 0)
				{
					m[ex_v] = 1;
					q.push(ex_v);
				}
			}
		}
		if (v[2] != 0)
		{
			if (v[0] < A)
			{
				ex_v[0] = v[0] + v[2];
				if (ex_v[0] > A)
				{
					ex_v[2] = ex_v[0] - A;
					ex_v[0] = A;
				}
				else
				{
					ex_v[2] = 0;
				}
				ex_v[1] = v[1];
				if (m.count(ex_v) == 0)
				{
					m[ex_v] = 1;
					q.push(ex_v);
				}
			}

			if (v[1] < B)
			{
				ex_v[1] = v[1] + v[2];
				if (ex_v[1] > B)
				{
					ex_v[2] = ex_v[1] - B;
					ex_v[1] = B;
				}
				else
				{
					ex_v[2] = 0;
				}
				ex_v[0] = v[0];
				if (m.count(ex_v) == 0)
				{
					m[ex_v] = 1;
					q.push(ex_v);
				}
			}
		}


	}

	sort(result.begin(), result.end());
	for (int i = 0; i < result.size(); i++)
	{
		cout << result[i] << " ";
	}
	cout << endl;

	return 0;
}


