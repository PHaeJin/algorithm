#include<iostream>
#include<vector>
#include<algorithm>

using namespace std;
int arr[101][101];
vector<int> go;
int Generation;
int x, y, d;
int ret = 0;
void make_curve(int g)
{

	int ex_x = x;
	int ex_y = y;
	int go_size = go.size();

	vector<int> ex_go;
	for (int i = 0; i < go_size; i++)
	{
		int R = go[i];
		if (R == 0)
		{
			ex_x = ex_x + 1;
			arr[ex_y][ex_x] = 1;
			ex_go.push_back(1);
		}
		else if (R == 1)
		{
			ex_y = ex_y - 1;
			arr[ex_y][ex_x] = 1;
			ex_go.push_back(2);
		}
		else if (R == 2)
		{
			ex_x = ex_x - 1;
			arr[ex_y][ex_x] = 1;
			ex_go.push_back(3);
		}
		else if (R == 3)
		{
			ex_y = ex_y + 1;
			arr[ex_y][ex_x] = 1;
			ex_go.push_back(0);
		}

	}
	
	reverse(ex_go.begin(),ex_go.end());
	for (int i = 0; i < ex_go.size(); i++)
	{
		go.push_back(ex_go[i]);
	}

	if (g == Generation)
	{
		return;
	}

	make_curve(g + 1);
}

void Calculate()
{
	for (int i = 0; i < 100; i++)
	{
		for (int j = 0; j < 100; j++)
		{
			if (arr[i][j] == 1 && arr[i + 1][j] == 1 && arr[i][j + 1] == 1 && arr[i + 1][j + 1] == 1)
				ret++;
		}
	}
}

int main()
{
	for (int i = 0; i < 101; i++)
	{
		for (int j = 0; j < 101; j++)
			arr[i][j] = 0;
	}
	
	int N;
	cin >> N;
	
	for (int i = 0; i < N; i++)
	{
		cin >> x >> y >> d >> Generation;

		arr[y][x] = 1;
		
		go.clear();
		
		go.push_back(d);

		make_curve(0);

	}
	
	Calculate();

	
	cout << ret<<endl;

	return 0;
}

