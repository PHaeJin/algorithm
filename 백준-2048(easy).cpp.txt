#include <iostream>
#include<string>
#include<vector>
#include<queue>
using namespace std;
int N;

struct my_struct
{
	int arr[21][21];
	int depth;
};

int main() 
{
	cin >> N;
	my_struct ms;

	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < N; j++)
		{
			cin>>ms.arr[i][j];
		}
	}
	ms.depth = 0;
	
	queue<my_struct> q;
	
	q.push(ms);
	int ret = 0;
	while (!q.empty())
	{
		ms = q.front();
		q.pop();
		
		int depth = ms.depth;

		if (depth == 5)
		{
			for (int i = 0; i < N; i++)
			{
				for (int j = 0; j < N; j++)
				{
					if (ms.arr[i][j] > ret)
						ret = ms.arr[i][j];
				}
			}
			continue;
		}

		int arr[21][21];
		bool check[21][21];

		for (int i = 0; i < N; i++)
		{
			for (int j = 0; j < N; j++)
			{
				arr[i][j] = ms.arr[i][j];
				check[i][j] = false;
			}
		}


	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < N; j++)
		{
			if (ms.arr[i][j] == 0)
				continue;
			else
			{
				int index = j;
				
				while (index - 1 >= 0 && ms.arr[i][index-1]==0)
				{
					index--;
				}
				if (index != j)
				{
					ms.arr[i][index] = ms.arr[i][j];
					ms.arr[i][j] = 0;
				}

				if (index - 1 >= 0 && ms.arr[i][index - 1] == ms.arr[i][index])
				{
					if (!check[i][index - 1])
					{
						check[i][index - 1] = true;
						ms.arr[i][index - 1] *= 2;
						ms.arr[i][index] = 0;
					}
				}
			}
		}
	}
	ms.depth = depth + 1;
	q.push(ms);	
	//left

	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < N; j++)
		{
			ms.arr[i][j] = arr[i][j];
			check[i][j] = false;
		}
	}

	for (int i = 0; i < N; i++)
	{
		for (int j = N-1; j >=0; j--)
		{
			if (ms.arr[i][j] == 0)
				continue;
			else
			{
				int index = j;

				while (index + 1 <N && ms.arr[i][index + 1] == 0)
				{
					index++;
				}
				if (index != j)
				{
					ms.arr[i][index] = ms.arr[i][j];
					ms.arr[i][j] = 0;
				}

				if (index + 1 <N  && ms.arr[i][index + 1] == ms.arr[i][index])
				{
					if (!check[i][index + 1])
					{
						check[i][index + 1] = true;
						ms.arr[i][index + 1] *= 2;
						ms.arr[i][index] = 0;
					}
				}
			}
		}
	}
	ms.depth = depth + 1;
	q.push(ms);
	//right

	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < N; j++)
		{
			ms.arr[i][j] = arr[i][j];
			check[i][j] = false;
		}
	}

	for (int j = 0; j < N; j++)
	{
		for (int i = 0; i<N; i++)
		{
			if (ms.arr[i][j] == 0)
				continue;
			else
			{
				int index = i;

				while (index -1>=0 && ms.arr[index-1][j] == 0)
				{
					index--;
				}
				if (index != i)
				{
					ms.arr[index][j] = ms.arr[i][j];
					ms.arr[i][j] = 0;
				}

				if (index - 1 >= 0 && ms.arr[index - 1][j] == ms.arr[index][j])
				{
					if (!check[index-1][j])
					{
						check[index-1][j] = true;
						ms.arr[index-1][j] *= 2;
						ms.arr[index][j] = 0;
					}
				}
			}
		}
	}
	ms.depth = depth + 1;
	q.push(ms);
	//up

	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < N; j++)
		{
			ms.arr[i][j] = arr[i][j];
			check[i][j] = false;
		}
	}

	for (int j = 0; j < N; j++)
	{
		for (int i = N-1; i>=0; i--)
		{
			if (ms.arr[i][j] == 0)
				continue;
			else
			{
				int index = i;

				while (index +1 <N && ms.arr[index + 1][j] == 0)
				{
					index++;
				}
				
				if (index != i)
				{
					ms.arr[index][j] = ms.arr[i][j];
					ms.arr[i][j] = 0;
				}

				if (index + 1 <N && ms.arr[index + 1][j] == ms.arr[index][j])
				{
					if (!check[index + 1][j])
					{
						check[index + 1][j] = true;
						ms.arr[index + 1][j] *= 2;
						ms.arr[index][j] = 0;
					}
				}
			}
		}
	}
	ms.depth = depth + 1;
	q.push(ms);
	//down
		
	}

	cout << ret << endl;
	
	return 0;
}
