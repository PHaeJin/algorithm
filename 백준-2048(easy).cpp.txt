// ConsoleApplication3.cpp: 콘솔 응용 프로그램의 진입점을 정의합니다.
//
#include<iostream>
#include<string.h>
#include<string>
#include<queue>
#include<utility>

using namespace std;

int arr[21][21];
int ex_arr[21][21];
bool connect[21][21];
int result = 0;
int main()
{
	ios::sync_with_stdio(false);
	int N;
	cin >> N;

	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < N; j++)
		{
			cin >> arr[i][j];
		}
	}
	
	int size = N * N;

	queue<int> q;

	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < N; j++)
		{
			q.push(arr[i][j]);
		}
	}

	int rotate = 0;
	while (!q.empty())
	{
		rotate++;
		int cnt = q.size() / size;
		while (cnt > 0)
		{
			for (int i = 0; i < N; i++)
			{
				for (int j = 0; j < N; j++)
				{
					arr[i][j] = q.front();
					q.pop();
					ex_arr[i][j] = arr[i][j];
				}
			}//배열 복구

			for (int i = 0; i < N; i++)
			{
				for (int j = 0; j < N; j++)
				{
					connect[i][j] = false;
				}
			}


			for (int i = 0; i < N; i++)
			{
				for (int j = 0; j < N; j++)
				{
					int kt = j;
					bool combine = true;
					if (arr[i][j] == 0)
						continue;
					while (j - 1 >= 0&&combine)
					{

						if (arr[i][j - 1] == 0)
						{
							arr[i][j - 1] = arr[i][j];
							arr[i][j] = 0;
						}
						else
						{
							if (arr[i][j - 1] == arr[i][j] && connect[i][j - 1] == false)
							{
								arr[i][j - 1] = 2 * arr[i][j - 1];
								arr[i][j] = 0;
								connect[i][j - 1] = true;
								combine = false;
							}
							else
							{
								if (connect[i][j - 1] == true)
									combine = false;
							}
						}
						j--;
					}
					j = kt;
				}
			}
			for (int i = 0; i < N; i++)
			{
				for (int j = 0; j < N; j++)
				{
					q.push(arr[i][j]);
				}
			}
			
			if (rotate == 5)
			{
				for (int i = 0; i < N; i++)
				{
					for (int j = 0; j < N; j++)
					{
						if (arr[i][j] > result)
							result = arr[i][j];
					}
				}
			}
			
			for (int i = 0; i < N; i++)
			{
				for (int j = 0; j < N; j++)
				{
					arr[i][j] = ex_arr[i][j];
				}
			}
			for (int i = 0; i < N; i++)
			{
				for (int j = 0; j < N; j++)
				{
					connect[i][j] = false;
				}
			}

			//왼쪽끝----------------------다시 초기화

			for (int i = 0; i < N; i++)
			{
				for (int j = N - 1; j >= 0; j--)
				{
					bool combine = true;
					int kt = j;
					if (arr[i][j] == 0)
						continue;
					while (j + 1 < N&&combine)
					{

						if (arr[i][j + 1] == 0)
						{
							arr[i][j + 1] = arr[i][j];
							arr[i][j] = 0;
						}
						else
						{
							if (arr[i][j + 1] == arr[i][j] && connect[i][j + 1] == false)
							{
								arr[i][j + 1] = 2 * arr[i][j + 1];
								arr[i][j] = 0;
								connect[i][j + 1] = true;
								combine = false;
							}
							else
							{
								if (connect[i][j + 1] == true)
									combine = false;
							}
						}
						j++;
					}
					j = kt;
				}
			}

			for (int i = 0; i < N; i++)
			{
				for (int j = 0; j < N; j++)
				{
					q.push(arr[i][j]);
				}
			}
			if (rotate == 5)
			{
				for (int i = 0; i < N; i++)
				{
					for (int j = 0; j < N; j++)
					{
						if (arr[i][j] > result)
							result = arr[i][j];
					}
				}
			}


			for (int i = 0; i < N; i++)
			{
				for (int j = 0; j < N; j++)
				{
					arr[i][j] = ex_arr[i][j];
				}
			}
			for (int i = 0; i < N; i++)
			{
				for (int j = 0; j < N; j++)
				{
					connect[i][j] = false;
				}
			}

			//오른쪽끝----------------------다시 초기화

			for (int j = 0; j < N; j++)
			{
				for (int i = 0; i< N; i++)
				{
					bool combine = true;
					int kt = i;
					if (arr[i][j] == 0)
						continue;
					while (i - 1 >= 0&&combine)
					{

						if (arr[i - 1][j] == 0)
						{
							arr[i - 1][j] = arr[i][j];
							arr[i][j] = 0;
						}
						else
						{
							if (arr[i - 1][j] == arr[i][j] && connect[i - 1][j] == false)
							{
								arr[i - 1][j] = 2 * arr[i - 1][j];
								arr[i][j] = 0;
								connect[i - 1][j] = true;
								combine = false;
							}
							else
							{
								if (connect[i-1][j] == true)
									combine = false;
							}
						}
						i--;
					}
					i = kt;
				}
			}

			for (int i = 0; i < N; i++)
			{
				for (int j = 0; j < N; j++)
				{
					q.push(arr[i][j]);
				}
			}
			if (rotate == 5)
			{
				for (int i = 0; i < N; i++)
				{
					for (int j = 0; j < N; j++)
					{
						if (arr[i][j] > result)
							result = arr[i][j];
					}
				}
			}

			for (int i = 0; i < N; i++)
			{
				for (int j = 0; j < N; j++)
				{
					arr[i][j] = ex_arr[i][j];
				}
			}
			for (int i = 0; i < N; i++)
			{
				for (int j = 0; j < N; j++)
				{
					connect[i][j] = false;
				}
			}

			//위쪽끝----------------------다시 초기화

			for (int j = 0; j < N; j++)
			{
				for (int i = N - 1; i >= 0; i--)
				{
					bool combine = true;
					int kt = i;
					if (arr[i][j] == 0)
						continue;
					while (i + 1 < N&&combine)
					{

						if (arr[i + 1][j] == 0)
						{
							arr[i + 1][j] = arr[i][j];
							arr[i][j] = 0;
						}
						else
						{
							if (arr[i + 1][j] == arr[i][j] && connect[i + 1][j] == false)
							{
								arr[i + 1][j] = 2 * arr[i + 1][j];
								arr[i][j] = 0;
								connect[i + 1][j] = true;
								combine = false;
							}
							else
							{
								if (connect[i+1][j] == true)
									combine = false;
							}
						}
						i++;
					}
					i = kt;
				}
			}
			for (int i = 0; i < N; i++)
			{
				for (int j = 0; j < N; j++)
				{
					q.push(arr[i][j]);
				}
			}
			
			if (rotate == 5)
			{
				for (int i = 0; i < N; i++)
				{
					for (int j = 0; j < N; j++)
					{
						if (arr[i][j] > result)
							result = arr[i][j];
					}
				}
			}



			for (int i = 0; i < N; i++)
			{
				for (int j = 0; j < N; j++)
				{
					arr[i][j] = ex_arr[i][j];
				}
			}
			for (int i = 0; i < N; i++)
			{
				for (int j = 0; j < N; j++)
				{
					connect[i][j] = false;
				}
			}


			
			cnt--;
		}
		if (rotate == 5)
			break;
		

	}
		
		
	
	cout << result << endl;


	return 0;
}

