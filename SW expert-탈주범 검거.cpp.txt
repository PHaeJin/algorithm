#include<iostream>
#include <queue>
#include <cstdio>
#include<algorithm>
#include<utility>

using namespace std;
int arr[51][51];
bool visit[51][51];
int depth[51][51];
int sol[51];
int T,ex_T;
int main()
{
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cin >> T;
	ex_T = T;
	while (T != 0)
	{
		int N, M, R, C, L;
		int count_c = 0;
		cin >> N >> M >> R >> C >> L;


		for (int i = 0; i < N; i++)
		{
			for (int j = 0; j < M; j++)
			{
				cin >> arr[i][j];
				visit[i][j] = false;
				depth[i][j] = 1;
			}
		}


		queue<pair<int, int>> q;

		q.push(make_pair(R, C));
		visit[R][C] = true;

		while (!q.empty())
		{
			int Mx = q.front().first;
			int My = q.front().second;
			q.pop();
			count_c++;
			if (depth[Mx][My] == L)
			{
				;
			}
			else
			{
				if (arr[Mx][My] == 1)
				{
					if (Mx + 1 < N && (arr[Mx + 1][My] == 2 || arr[Mx + 1][My] == 1 || arr[Mx + 1][My] == 4 || arr[Mx + 1][My] == 7) && visit[Mx + 1][My] == false)
					{
						visit[Mx + 1][My] = true;
						q.push(make_pair(Mx + 1, My));
						depth[Mx + 1][My] = depth[Mx][My] + 1;
					}
					if (My + 1 < M && (arr[Mx][My + 1] == 3 || arr[Mx][My + 1] == 1 || arr[Mx][My + 1] == 6 || arr[Mx][My + 1] == 7) && visit[Mx][My + 1] == false)
					{
						visit[Mx][My + 1] = true;
						q.push(make_pair(Mx, My + 1));
						depth[Mx][My + 1] = depth[Mx][My] + 1;
					}
					if (Mx - 1 >= 0 && (arr[Mx - 1][My] == 2 || arr[Mx - 1][My] == 1 || arr[Mx - 1][My] == 5 || arr[Mx - 1][My] == 6) && visit[Mx - 1][My] == false)
					{
						visit[Mx - 1][My] = true;
						q.push(make_pair(Mx - 1, My));
						depth[Mx - 1][My] = depth[Mx][My] + 1;
					}
					if (My - 1 >= 0 && (arr[Mx][My - 1] == 3 || arr[Mx][My - 1] == 1 || arr[Mx][My - 1] == 4 || arr[Mx][My - 1] == 5) && visit[Mx][My - 1] == false)
					{
						visit[Mx][My - 1] = true;
						q.push(make_pair(Mx, My - 1));
						depth[Mx][My - 1] = depth[Mx][My] + 1;
					}
				}
				else if (arr[Mx][My] == 2)
				{
					if (Mx - 1 >= 0 && (arr[Mx - 1][My] == 1 || arr[Mx - 1][My] == 2 || arr[Mx - 1][My] == 5 || arr[Mx - 1][My] == 6) && visit[Mx - 1][My] == false)
					{
						visit[Mx - 1][My] = true;
						q.push(make_pair(Mx - 1, My));
						depth[Mx - 1][My] = depth[Mx][My] + 1;
					}
					if (Mx + 1 < N && (arr[Mx + 1][My] == 1 || arr[Mx + 1][My] == 2 || arr[Mx + 1][My] == 4 || arr[Mx + 1][My] == 7) && visit[Mx + 1][My] == false)
					{
						visit[Mx + 1][My] = true;
						q.push(make_pair(Mx + 1, My));
						depth[Mx + 1][My] = depth[Mx][My] + 1;
					}
				}
				else if (arr[Mx][My] == 3)
				{
					if (My - 1 >= 0 && (arr[Mx][My - 1] == 1 || arr[Mx][My - 1] == 3 || arr[Mx][My - 1] == 4 || arr[Mx][My - 1] == 5) && visit[Mx][My - 1] == false)
					{
						visit[Mx][My - 1] = true;
						q.push(make_pair(Mx, My - 1));
						depth[Mx][My - 1] = depth[Mx][My] + 1;

					}
					if (My + 1 < M && (arr[Mx][My + 1] == 1 || arr[Mx][My + 1] == 3 || arr[Mx][My + 1] == 6 || arr[Mx][My + 1] == 7) && visit[Mx][My + 1] == false)
					{
						visit[Mx][My + 1] = true;
						q.push(make_pair(Mx, My + 1));
						depth[Mx][My + 1] = depth[Mx][My] + 1;

					}

				}
				else if (arr[Mx][My] == 4)
				{
					if (My + 1 < M && (arr[Mx][My + 1] == 1 || arr[Mx][My + 1] == 3 || arr[Mx][My + 1] == 6 || arr[Mx][My + 1] == 7) && visit[Mx][My + 1] == false)
					{
						visit[Mx][My + 1] = true;
						q.push(make_pair(Mx, My + 1));
						depth[Mx][My + 1] = depth[Mx][My] + 1;

					}
					if (Mx - 1 >= 0 && (arr[Mx - 1][My] == 1 || arr[Mx - 1][My] == 2 || arr[Mx - 1][My] == 5 || arr[Mx - 1][My] == 6) && visit[Mx - 1][My] == false)
					{
						visit[Mx - 1][My] = true;
						q.push(make_pair(Mx - 1, My));
						depth[Mx - 1][My] = depth[Mx][My] + 1;

					}

				}
				else if (arr[Mx][My] == 5)
				{
					if (Mx + 1 < N && (arr[Mx + 1][My] == 1 || arr[Mx + 1][My] == 2 || arr[Mx + 1][My] == 4 || arr[Mx + 1][My] == 7) && visit[Mx + 1][My] == false)
					{
						visit[Mx + 1][My] = true;
						q.push(make_pair(Mx + 1, My));
						depth[Mx + 1][My] = depth[Mx][My] + 1;

					}
					if (My + 1 < M && (arr[Mx][My + 1] == 1 || arr[Mx][My + 1] == 3 || arr[Mx][My + 1] == 6 || arr[Mx][My + 1] == 7) && visit[Mx][My + 1] == false)
					{
						visit[Mx][My + 1] = true;
						q.push(make_pair(Mx, My + 1));
						depth[Mx][My + 1] = depth[Mx][My] + 1;

					}
				}
				else if (arr[Mx][My] == 6)
				{
					if (My - 1 >= 0 && (arr[Mx][My - 1] == 1 || arr[Mx][My - 1] == 3 || arr[Mx][My - 1] == 4 || arr[Mx][My - 1] == 5) && visit[Mx][My - 1] == false)
					{
						visit[Mx][My - 1] = true;
						q.push(make_pair(Mx, My - 1));
						depth[Mx][My - 1] = depth[Mx][My] + 1;

					}
					if (Mx + 1 < N && (arr[Mx + 1][My] == 1 || arr[Mx + 1][My] == 2 || arr[Mx + 1][My] == 4 || arr[Mx + 1][My] == 7) && visit[Mx + 1][My] == false)
					{
						visit[Mx + 1][My] = true;
						q.push(make_pair(Mx + 1, My));
						depth[Mx + 1][My] = depth[Mx][My] + 1;

					}
				}
				else if (arr[Mx][My] == 7)
				{
					if (Mx - 1 >= 0 && (arr[Mx - 1][My] == 1 || arr[Mx - 1][My] == 2 || arr[Mx - 1][My] == 5 || arr[Mx - 1][My] == 6) && visit[Mx - 1][My] == false)
					{
						visit[Mx - 1][My] = true;
						q.push(make_pair(Mx - 1, My));
						depth[Mx - 1][My] = depth[Mx][My] + 1;

					}
					if (My - 1 >= 0 && (arr[Mx][My - 1] == 1 || arr[Mx][My - 1] == 3 || arr[Mx][My - 1] == 4 || arr[Mx][My - 1] == 5) && visit[Mx][My - 1] == false)
					{
						visit[Mx][My - 1] = true;
						q.push(make_pair(Mx, My - 1));
						depth[Mx][My - 1] = depth[Mx][My] + 1;

					}
				}



			}

		}

		sol[T] = count_c;
		T--;
	}
	int check_c = 1;
	for (int i = ex_T; i > 0; i--)
	{
		cout << "#" << check_c << " " << sol[i] << endl;
		check_c++;
	}

	return 0;
}


