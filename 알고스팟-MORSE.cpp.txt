
#include<iostream>
#include<algorithm>
#include<math.h>
#include<vector>
#include<string>
using namespace std;
int memo[101][101];
int K;
const int MOD = 1000000100;
int min_num(int a, int b)
{
	if (a > b)
		return b;
	else
		return a;
}

int MOURSE(int N, int M)
{
	if (N==0&&M==0)
	{
		memo[N][M] = 1;
		return 1;
	}
	if (memo[N][M] >= 0)
	{
		return memo[N][M];
	}	

	int ret = 0;
	
	if (N > 0 && M > 0)
	{
		ret = min_num(MOD, (MOURSE(N - 1, M) + MOURSE(N, M - 1)));
	}
	else if(N>0)
	ret=min_num(MOD,MOURSE(N-1, M));		
	else if (M > 0)
	ret=min_num(MOD,MOURSE(N, M-1));
	
	memo[N][M]=ret;

	return ret;
}
void restruct(int N, int M,string s)
{
	if (K < 0) return;

	if (N == 0 && M == 0)
	{
		if (K == 0)
		{
			cout << s << endl;
		}
		--K;
		return;
	}	
	
	if (memo[N][M] <= K)
	{
		K -= memo[N][M];
		return;
	}
	if (N > 0)
		restruct(N - 1, M, s + "-");
	if (M > 0)
		restruct(N, M - 1, s + "o");
}
int main()
{
	int testcase;
	cin >> testcase;
	while (testcase != 0)
	{
		int N, M;
		cin >> N >> M >> K;
		string s = "";
		
		for (int i = 0; i < 101; i++)
		{
			for (int j = 0; j < 101; j++)
				memo[i][j] = -1;
		}

		int result_s;

		result_s = MOURSE(N, M);
		K = K - 1;

		restruct(N, M, s);
		
		testcase--;
	}
		
		return 0;
}

