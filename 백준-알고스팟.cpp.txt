#include<iostream>
#include<algorithm>
#include<queue>
#include<cstdio>
#include<utility>
#include<functional>

using namespace std;



int M, N;
int arr[101][101];
bool visit[101][101];


int main()
{
	
	scanf_s("%d %d", &M, &N);

	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < M; j++)
		{
			int num;
			scanf_s("%1d", &num);
			arr[i][j]=num;
			visit[i][j] = false;
		}
	}
	
	
	priority_queue<pair<int,int>,vector<pair<int,int> >,greater<pair<int,int>>> pq;
	
	pq.push(make_pair(0, 0));
	
	while (!pq.empty())
	{
		int depth = pq.top().first;
		int Num = pq.top().second;
		pq.pop();
		int x = Num / M;
		int y = Num % M;

		if (x == N - 1 && y == M - 1)
		{
			cout << depth << endl;
			break;
		}

		if (x + 1 < N && !visit[x + 1][y])
		{
			visit[x + 1][y] = true;
			Num = (x + 1)*M + y;
			if (arr[x + 1][y] == 1)
			{
				pq.push(make_pair(depth + 1,Num));
			}
			else
			{
				pq.push(make_pair(depth, Num));
			}
		}
		if (y + 1 < M && !visit[x][y + 1])
		{
			visit[x][y+1] = true;
			Num = x*M + y+1;
			if (arr[x][y+1] == 1)
			{
				pq.push(make_pair(depth + 1, Num));
			}
			else
			{
				pq.push(make_pair(depth, Num));
			}
		}
		if (x - 1 >= 0 && !visit[x - 1][y])
		{
			visit[x - 1][y] = true;
			Num = (x- 1)*M + y;
			if (arr[x - 1][y] == 1)
			{
				pq.push(make_pair(depth + 1, Num));
			}
			else
			{
				pq.push(make_pair(depth, Num));
			}
		}
		if (y - 1 >= 0 && !visit[x][y - 1])
		{
			visit[x][y-1] = true;
			Num = x*M + y-1;
			if (arr[x][y-1] == 1)
			{
				pq.push(make_pair(depth + 1, Num));
			}
			else
			{
				pq.push(make_pair(depth, Num));
			}
		}
	
	}


	return 0;
}