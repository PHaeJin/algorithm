#include<iostream>
#include<vector>
#include<fstream>
#include<string>

using namespace std;

char Search[8] = { 'A','B','C' ,'D' ,'E' ,'F' ,'G' ,'H' };
int arr[8][8];

void move(string s)
{
	int Kx, Ky, Dx, Dy;
	for (int i = 0; i < 8; i++)
	{
		for (int j = 0; j < 8; j++)
		{
			if (arr[i][j] == 1)
			{
				Kx = i;
				Ky = j;
			}
			if (arr[i][j] == 2)
			{
				Dx = i;
				Dy = j;
			}
		}
	}

	if (s.compare("R")==0)
	{
		if (Ky + 1 < 8)
		{
			arr[Kx][Ky] = 0;
			Ky += 1;
			if (Kx == Dx && Ky == Dy)
			{
				if (Dy + 1 < 8)
				{
					arr[Dx][Dy] = 0;
					Dy += 1;					
				}
				else
				{
					Ky -= 1;
				}
			}
			arr[Dx][Dy] = 2;
			arr[Kx][Ky] = 1;
		}
	}
	else if (s.compare("L") == 0)
	{
		if (Ky -1>=0)
		{
			arr[Kx][Ky] = 0;
			Ky -= 1;
			if (Kx == Dx && Ky == Dy)
			{
				if (Dy -1>=0)
				{
					arr[Dx][Dy] = 0;
					Dy -= 1;
				}
				else
				{
					Ky += 1;
				}
			}
			arr[Dx][Dy] = 2;
			arr[Kx][Ky] = 1;
		}
	}
	else if (s.compare("B") == 0)
	{
		if (Kx + 1 < 8)
		{
			arr[Kx][Ky] = 0;
			Kx += 1;
			if (Kx == Dx && Ky == Dy)
			{
				if (Dx + 1 < 8)
				{
					arr[Dx][Dy] = 0;
					Dx += 1;
				}
				else
				{
					Kx -= 1;
				}
			}
			arr[Dx][Dy] = 2;
			arr[Kx][Ky] = 1;
		}
	}
	else if (s.compare("T") == 0)
	{
		if (Kx - 1 >= 0)
		{
			arr[Kx][Ky] = 0;
			Kx -= 1;
			if (Kx == Dx && Ky == Dy)
			{
				if (Dx - 1 >= 0)
				{
					arr[Dx][Dy] = 0;
					Dx -= 1;
				}
				else
				{
					Kx += 1;
				}
			}
			arr[Dx][Dy] = 2;
			arr[Kx][Ky] = 1;
		}
	}
	else if (s.compare("RT") == 0)
	{
		if (Kx - 1 >= 0&&Ky+1<8)
		{
			arr[Kx][Ky] = 0;
			Kx -= 1;
			Ky += 1;
			if (Kx == Dx && Ky == Dy)
			{
				if (Dx - 1 >= 0&&Dy+1<8)
				{
					arr[Dx][Dy] = 0;
					Dx -= 1;
					Dy += 1;
				}
				else
				{
					Kx += 1;
					Ky -= 1;
				}
			}
			arr[Dx][Dy] = 2;
			arr[Kx][Ky] = 1;
		}
	}
	else if (s.compare("LT") == 0)
	{
		if (Kx - 1 >= 0 && Ky -1>=0)
		{
			arr[Kx][Ky] = 0;
			Kx -= 1;
			Ky -= 1;
			if (Kx == Dx && Ky == Dy)
			{
				if (Dx - 1 >= 0 && Dy -1>=0)
				{
					arr[Dx][Dy] = 0;
					Dx -= 1;
					Dy -= 1;
				}
				else
				{
					Kx += 1;
					Ky += 1;
				}
			}
			arr[Dx][Dy] = 2;
			arr[Kx][Ky] = 1;
		}
	}
	else if (s.compare("RB") == 0)
	{
		if (Kx +1<8 && Ky +1<8)
		{
			arr[Kx][Ky] = 0;
			Kx += 1;
			Ky += 1;
			if (Kx == Dx && Ky == Dy)
			{
				if (Dx + 1 <8 && Dy + 1 <8)
				{
					arr[Dx][Dy] = 0;
					Dx += 1;
					Dy += 1;
				}
				else
				{
					Kx -= 1;
					Ky -= 1;
				}
			}
			arr[Dx][Dy] = 2;
			arr[Kx][Ky] = 1;
		}
	}
	else if (s.compare("LB") == 0)
	{
		if (Kx + 1<8 && Ky -1>=0)
		{
			arr[Kx][Ky] = 0;
			Kx += 1;
			Ky -= 1;
			if (Kx == Dx && Ky == Dy)
			{
				if (Dx + 1 <8 && Dy -1>=0)
				{
					arr[Dx][Dy] = 0;
					Dx += 1;
					Dy -= 1;
				}
				else
				{
					Kx -= 1;
					Ky += 1;
				}
			}
			arr[Dx][Dy] = 2;
			arr[Kx][Ky] = 1;
		}
	}

}

int main()
{
	for (int i = 0; i < 8; i++)
	{
		for (int j = 0; j < 8; j++)
		{
			arr[i][j] = 0;
		}
	}

	char Alpha;
	int row,col,N;
	cin >> Alpha >> row;
	for (int i = 0; i < 8; i++)
	{
		if (Search[i] == Alpha)
		{
			col = i;
			break;
		}
	}
	arr[8-row][col] = 1;

	cin >> Alpha >> row;
	for (int i = 0; i < 8; i++)
	{
		if (Search[i] == Alpha)
		{
			col = i;
			break;
		}
	}
	arr[8-row][col] = 2;
	cin >> N;
	for (int i = 0; i < N; i++)
	{
		string s;
		cin >> s;
		move(s);
	}
	int Kx, Ky, Dx, Dy;

	for (int i = 0; i < 8; i++)
	{
		for (int j = 0; j < 8; j++)
		{
			if (arr[i][j] == 1)
			{
				Kx = i;
				Ky = j;
			}
			if (arr[i][j] == 2)
			{
				Dx = i;
				Dy = j;
			}
		}
	}

	cout << Search[Ky] << 8-Kx << endl;
	cout << Search[Dy] << 8-Dx << endl;

	return 0;
}
