#include<iostream>
#include<vector>
#include<algorithm>
#include<utility>
#include<queue>
using namespace std;
int map[11][11];
pair<int, int> p[11];
vector<int> v;
vector<int> p_n;
int N, PeopleNum;
int result = numeric_limits<int>::max();
int S1_s, S2_s;

void Simulate(vector<int> P1, vector<int> P2)
{

	vector<int> S1_wait, S2_wait, S1_Play, S2_Play;
	queue<int> S1_Q, S2_Q;
	int Time_C = 0;

	for (int i = 0; i < P1.size(); i++)
	{
		S1_wait.push_back(p[P1[i]].first);
	}
	for (int i = 0; i < P2.size(); i++)
	{
		S2_wait.push_back(p[P2[i]].second);
	}
	if(S1_wait.size()!=0)
	sort(S1_wait.begin(), S1_wait.end());

	if (S2_wait.size() != 0)
	sort(S2_wait.begin(), S2_wait.end());

	S1_Play.push_back(S1_s);
	S1_Play.push_back(S1_s);
	S1_Play.push_back(S1_s);

	S2_Play.push_back(S2_s);
	S2_Play.push_back(S2_s);
	S2_Play.push_back(S2_s);

	while (true)
	{

		Time_C++;


		if (S1_wait.size() != 0)
		{
			for (int i = 0; i < S1_wait.size(); i++)
				S1_wait[i]--;
		}
		
		if (S2_wait.size() != 0)
		{
			for (int i = 0; i < S2_wait.size(); i++)
				S2_wait[i]--;
		}
		
		for (int i = 0; i < 3; i++)
		{
			if (S1_Play[i] != S1_s && S1_Play[i] != -1 && S1_Play[i] != 0)
				S1_Play[i]--;
			else if (S1_Play[i] == -1)
			{
				S1_Play[i] = S1_s - 1;
			}
			else if (S1_Play[i] == 0)
			{
				S1_Play[i] = S1_s;
				if (!S1_Q.empty())
				{
					S1_Play[i] = S1_s - 1;
					S1_Q.pop();
				}
			}
		}
		for (int i = 0; i < 3; i++)
		{

			if (S2_Play[i] != S2_s && S2_Play[i] != -1 && S2_Play[i] != 0)
				S2_Play[i]--;
			else if (S2_Play[i] == -1)
			{
				S2_Play[i] = S2_s - 1;
			}
			else if (S2_Play[i] == 0)
			{
				S2_Play[i] = S2_s;
				if (!S2_Q.empty())
				{
					S2_Play[i] = S2_s - 1;
					S2_Q.pop();
				}
			}
		}

		bool check_end = true;

		for (int i = 0; i < S1_wait.size(); i++)
		{
			if (S1_wait[i] >= 0)
				check_end = false;
		}
		for (int i = 0; i < S2_wait.size(); i++)
		{
			if (S2_wait[i] >= 0)
				check_end = false;
		}

		for (int i = 0; i < 3; i++)
		{

			if (S1_Play[i] != S1_s)
				check_end = false;
		}
		for (int i = 0; i < 3; i++)
		{

			if (S2_Play[i] != S2_s)
				check_end = false;
		}
		if (check_end)
			break;


		for (int i = 0; i < S1_wait.size(); i++)
		{
			if (S1_wait[i] == 0)
			{
				S1_Q.push(1);
			}
		}

		for (int i = 0; i < S2_wait.size(); i++)
		{
			if (S2_wait[i] == 0)
			{
				S2_Q.push(1);
			}
		}

		for (int i = 0; i < 3; i++)
		{
			if (S1_Play[i] == S1_s)
			{
				if (!S1_Q.empty())
				{
					S1_Play[i] = -1;
					S1_Q.pop();
				}
			}
		}
		for (int i = 0; i < 3; i++)
		{
			if (S2_Play[i] == S2_s)
			{
				if (!S2_Q.empty())
				{
					S2_Play[i] = -1;
					S2_Q.pop();
				}
			}
		}

	}

	if (result > Time_C)
		result = Time_C;

	return;

}

void Calculate(int v_size, int index, int num)
{
	if (v_size == num || index >= PeopleNum)
	{
		if (v_size == num)
		{
			vector<int> P1, P2;
			int index1=0, index2 = 0;
			P1 = v;
			if (!v.empty())
			{
				while (true)
				{
					if (p_n[index1] == v[index2])
					{
						index1++;
						index2++;
					}
					else
					{
						P2.push_back(p_n[index1]);
						index1++;
					}
					if (index2 >= num)
					{
						for (int i = index1; i < PeopleNum; i++)
						{
							P2.push_back(p_n[i]);
						}
						break;
					}
				}
			}
			else
			{
				for (int i = 0; i < PeopleNum; i++)
				{
					P2.push_back(p_n[i]);
				}
			}

			Simulate(P1, P2);

		}
		return;
	}
	Calculate(v_size, index + 1, num);
	v.push_back(p_n[index]);
	Calculate(v_size+1, index + 1, num);
	v.pop_back();
}
int main()
{
	int Testcase, CountT;
	CountT = 1;
	cin >> Testcase;
	while (Testcase!=0)
	{
		v.clear();
		p_n.clear();

		PeopleNum = 0;
		result = numeric_limits<int>::max();
		cin >> N;

		int S1x = -1, S1y = -1, S2x = -1, S2y = -1;

		for (int i = 0; i < N; i++)
		{
			for (int j = 0; j < N; j++)
			{
				cin >> map[i][j];
				if (map[i][j] == 1)
					PeopleNum++;
				else if (map[i][j] != 0 && map[i][j] != 1)
				{
					if (S1x == -1)
					{
						S1x = i;
						S1y = j;
						S1_s = map[i][j];
					}
					else
					{
						S2x = i;
						S2y = j;
						S2_s = map[i][j];
					}
				}
			}
		}

		int People_index = 1;
		for (int i = 0; i < N; i++)
		{
			for (int j = 0; j < N; j++)
			{
				if (map[i][j] == 1)
				{
					int d1, d2;
					d1 = abs(i - S1x) + abs(j - S1y);
					d2 = abs(i - S2x) + abs(j - S2y);
					p[People_index++] = make_pair(d1, d2);
				}
			}
		}

		for (int i = 1; i <= PeopleNum; i++)
		{
			p_n.push_back(i);
		}

			
		for (int i = 0; i<=PeopleNum; i++)
				Calculate(0, 0, i);
		
		

		cout <<"#"<<CountT++<<" "<< result << endl;

		Testcase--;
	}

	

	return 0;
}

